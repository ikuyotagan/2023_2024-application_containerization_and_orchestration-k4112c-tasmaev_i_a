/*
 * This file is generated by jOOQ.
 */
package ru.itmo.ict.todolist.generated.jooq.tables.daos


import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.impl.DAOImpl
import org.springframework.stereotype.Repository

import ru.itmo.ict.todolist.generated.jooq.tables.Tasks
import ru.itmo.ict.todolist.generated.jooq.tables.records.TasksRecord


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
@Repository
open class TasksDao(configuration: Configuration?) : DAOImpl<TasksRecord, ru.itmo.ict.todolist.generated.jooq.tables.pojos.Tasks, Int>(Tasks.TASKS, ru.itmo.ict.todolist.generated.jooq.tables.pojos.Tasks::class.java, configuration) {

    /**
     * Create a new TasksDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: ru.itmo.ict.todolist.generated.jooq.tables.pojos.Tasks): Int? = o.id

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfId(lowerInclusive: Int?, upperInclusive: Int?): List<ru.itmo.ict.todolist.generated.jooq.tables.pojos.Tasks> = fetchRange(Tasks.TASKS.ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    fun fetchById(vararg values: Int): List<ru.itmo.ict.todolist.generated.jooq.tables.pojos.Tasks> = fetch(Tasks.TASKS.ID, *values.toTypedArray())

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    fun fetchOneById(value: Int): ru.itmo.ict.todolist.generated.jooq.tables.pojos.Tasks? = fetchOne(Tasks.TASKS.ID, value)

    /**
     * Fetch records that have <code>title BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfTitle(lowerInclusive: String, upperInclusive: String): List<ru.itmo.ict.todolist.generated.jooq.tables.pojos.Tasks> = fetchRange(Tasks.TASKS.TITLE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>title IN (values)</code>
     */
    fun fetchByTitle(vararg values: String): List<ru.itmo.ict.todolist.generated.jooq.tables.pojos.Tasks> = fetch(Tasks.TASKS.TITLE, *values)

    /**
     * Fetch records that have <code>description BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfDescription(lowerInclusive: String?, upperInclusive: String?): List<ru.itmo.ict.todolist.generated.jooq.tables.pojos.Tasks> = fetchRange(Tasks.TASKS.DESCRIPTION, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>description IN (values)</code>
     */
    fun fetchByDescription(vararg values: String): List<ru.itmo.ict.todolist.generated.jooq.tables.pojos.Tasks> = fetch(Tasks.TASKS.DESCRIPTION, *values)

    /**
     * Fetch records that have <code>completed BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfCompleted(lowerInclusive: Boolean?, upperInclusive: Boolean?): List<ru.itmo.ict.todolist.generated.jooq.tables.pojos.Tasks> = fetchRange(Tasks.TASKS.COMPLETED, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>completed IN (values)</code>
     */
    fun fetchByCompleted(vararg values: Boolean): List<ru.itmo.ict.todolist.generated.jooq.tables.pojos.Tasks> = fetch(Tasks.TASKS.COMPLETED, *values.toTypedArray())
}
